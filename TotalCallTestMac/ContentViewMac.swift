//
//  ContentView.swift
//  TotalCallTest
//
//  Created by AL03041390 on 8/19/25.
//

import SwiftUI

struct ContentView: View {
    @StateObject private var liveKitManager = LiveKitManager()
    @State private var serverURL = "wss://alllogo-lu7k4qum.livekit.cloud"
    @State private var apiKey = "APIi9kdC6vaC3Zb"
    @State private var apiSecret = "eiwzpboeOcSrL11eWtjBMrKzPXClOfaA5G0ZsJ6hQddA"
    @State private var roomName = "test-room"
    @State private var participantName = "User-\(Int.random(in: 1000...9999))"
    @State private var isHost = false
    @State private var generatedToken = ""
    @State private var isGeneratingToken = false
    @State private var tokenError: String?
    @State private var showingVideoCall = false
    @State private var showVideoStats = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    Text("LiveKit Video Call")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    // Server Configuration
                    VStack(alignment: .leading, spacing: 12) {
                        Text("ÏÑúÎ≤Ñ ÏÑ§Ï†ï")
                            .font(.headline)
                        
                        TextField("Server URL (wss://your-livekit-server.com)", text: $serverURL)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(10)
                    
                    // API Configuration
                    VStack(alignment: .leading, spacing: 12) {
                        Text("API ÏÑ§Ï†ï")
                            .font(.headline)
                        
                        TextField("API Key", text: $apiKey)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        
                        SecureField("API Secret", text: $apiSecret)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .textSelection(.disabled)
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(10)
                    
                    // Room Configuration
                    VStack(alignment: .leading, spacing: 12) {
                        Text("Î∞© ÏÑ§Ï†ï")
                            .font(.headline)
                        
                        TextField("Room Name", text: $roomName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        
                        TextField("Participant Name", text: $participantName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        
                        Toggle("Ìò∏Ïä§Ìä∏Î°ú Ï∞∏Ïó¨", isOn: $isHost)
                            .padding(.top, 8)
                        
                        Toggle("ÎπÑÎîîÏò§ ÌíàÏßà Ï†ïÎ≥¥ ÌëúÏãú", isOn: $showVideoStats)
                            .padding(.top, 8)
                        
                        if isHost {
                            Text("‚ö° Ìò∏Ïä§Ìä∏ Í∂åÌïú: Ï∞∏Í∞ÄÏûê Í¥ÄÎ¶¨, Î∞© ÏÑ§Ï†ï Î≥ÄÍ≤Ω")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                        
                        if showVideoStats {
                            Text("üìä ÎπÑÎîîÏò§ Ìï¥ÏÉÅÎèÑ, FPS, ÎπÑÌä∏Î†àÏù¥Ìä∏, Ìå®ÌÇ∑ ÏÜêÏã§Î•† Îì± ÌíàÏßà Ï†ïÎ≥¥ ÌëúÏãú")
                                .font(.caption)
                                .foregroundColor(.blue)
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(10)
                    
                    // Token Generation
                    VStack(alignment: .leading, spacing: 12) {
                        Text("ÌÜ†ÌÅ∞ ÏÉùÏÑ±")
                            .font(.headline)
                        
                        Button(action: generateToken) {
                            HStack {
                                if isGeneratingToken {
                                    ProgressView()
                                        .scaleEffect(0.8)
                                } else {
                                    Image(systemName: "key.fill")
                                }
                                Text(isGeneratingToken ? "ÌÜ†ÌÅ∞ ÏÉùÏÑ± Ï§ë..." : "LiveKit ÌÜ†ÌÅ∞ ÏÉùÏÑ±")
                            }
                            .foregroundColor(.white)
                            .padding()
                            .background(canGenerateToken ? Color.blue : Color.gray)
                            .cornerRadius(8)
                        }
                        .disabled(!canGenerateToken || isGeneratingToken)
                        
                        if let error = tokenError {
                            Text(error)
                                .foregroundColor(.red)
                                .font(.caption)
                        }
                        
                        if !generatedToken.isEmpty {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("ÏÉùÏÑ±Îêú ÌÜ†ÌÅ∞:")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                ScrollView(.horizontal, showsIndicators: false) {
                                    Text(generatedToken)
                                        .font(.system(size: 10, design: .monospaced))
                                        .padding(8)
                                        .background(Color.gray.opacity(0.1))
                                        .cornerRadius(4)
                                }
                                
                                if let expiration = LiveKitTokenGenerator.getTokenExpiration(generatedToken) {
                                    Text("ÎßåÎ£å: \(expiration, style: .date) \(expiration, style: .time)")
                                        .font(.caption2)
                                        .foregroundColor(.secondary)
                                }
                                
                                Button("ÌÜ†ÌÅ∞ Î≥µÏÇ¨") {
                                    copyToClipboard(generatedToken)
                                }
                                .font(.caption)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(Color.blue.opacity(0.1))
                                .foregroundColor(.blue)
                                .cornerRadius(4)
                            }
                            .padding(.top, 8)
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(10)
                    
                    // Join Call Button
                    Button("ÎπÑÎîîÏò§ ÌÜµÌôî ÏãúÏûë") {
                        showingVideoCall = true
                    }
                    .font(.title2)
                    .foregroundColor(.white)
                    .padding()
                    .background(isReadyToJoin ? Color.green : Color.gray)
                    .cornerRadius(10)
                    .disabled(!isReadyToJoin)
                    
                    if let error = liveKitManager.connectionError {
                        Text(error)
                            .foregroundColor(.red)
                            .font(.caption)
                            .multilineTextAlignment(.center)
                    }
                    
                    Text("Status: \(liveKitManager.isConnected ? "Connected" : "Disconnected")")
                        .font(.caption)
                        .foregroundColor(.gray)
                    
                    #if targetEnvironment(simulator)
                    VStack(spacing: 8) {
                        Text("üì± ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ Î™®Îìú")
                            .font(.caption)
                            .fontWeight(.semibold)
                            .foregroundColor(.orange)
                        
                        Text("‚ö†Ô∏è Ïπ¥Î©îÎùº/ÎßàÏù¥ÌÅ¨ Ï†úÌïú: Ïã§Ï†ú ÎîîÎ∞îÏù¥Ïä§ÏóêÏÑú Ï†ÑÏ≤¥ Í∏∞Îä• ÌÖåÏä§Ìä∏ Í∞ÄÎä•")
                            .font(.caption2)
                            .multilineTextAlignment(.center)
                            .foregroundColor(.secondary)
                            .padding(.horizontal)
                    }
                    .padding(12)
                    .background(Color.orange.opacity(0.1))
                    .cornerRadius(8)
                    #endif
                }
                .padding()
            }
            .sheet(isPresented: $showingVideoCall) {
                LiveKitCallView(
                    liveKitManager: liveKitManager,
                    roomURL: serverURL.trimmingCharacters(in: .whitespacesAndNewlines),
                    token: generatedToken,
                    isPresented: $showingVideoCall,
                    showVideoStats: showVideoStats
                )
                .frame(minWidth: 800, minHeight: 600)
            }
        }
    }
    
    private var canGenerateToken: Bool {
        !apiKey.isEmpty && !apiSecret.isEmpty && !roomName.isEmpty && !participantName.isEmpty
    }
    
    private var isReadyToJoin: Bool {
        isServerURLValid && !generatedToken.isEmpty
    }
    
    private var isServerURLValid: Bool {
        let trimmed = serverURL.trimmingCharacters(in: .whitespacesAndNewlines)
        guard let url = URL(string: trimmed) else { return false }
        return ["ws", "wss"].contains(url.scheme?.lowercased()) && !(url.host ?? "").isEmpty
    }
    
    private func generateToken() {
        tokenError = nil
        isGeneratingToken = true
        
        DispatchQueue.global(qos: .userInitiated).async {
            do {
                let token = try LiveKitTokenGenerator.generateToken(
                    apiKey: apiKey,
                    apiSecret: apiSecret,
                    roomName: roomName,
                    participantName: participantName,
                    expirationTimeInSeconds: 3600, // 1 hour
                    isHost: isHost
                )
                
                DispatchQueue.main.async {
                    self.generatedToken = token
                    self.isGeneratingToken = false
                }
            } catch {
                DispatchQueue.main.async {
                    self.tokenError = "ÌÜ†ÌÅ∞ ÏÉùÏÑ± Ïã§Ìå®: \(error.localizedDescription)"
                    self.isGeneratingToken = false
                }
            }
        }
    }
    
    private func copyToClipboard(_ text: String) {
        NSPasteboard.general.setString(text, forType: .string)
        // macOS doesn't have haptic feedback like iOS
    }
}

#Preview {
    ContentView()
}
